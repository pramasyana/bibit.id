// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// SpanningTransformer is an autogenerated mock type for the SpanningTransformer type
type SpanningTransformer struct {
	mock.Mock
}

// Reset provides a mock function with given fields:
func (_m *SpanningTransformer) Reset() {
	_m.Called()
}

// Span provides a mock function with given fields: src, atEOF
func (_m *SpanningTransformer) Span(src []byte, atEOF bool) (int, error) {
	ret := _m.Called(src, atEOF)

	var r0 int
	if rf, ok := ret.Get(0).(func([]byte, bool) int); ok {
		r0 = rf(src, atEOF)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, bool) error); ok {
		r1 = rf(src, atEOF)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transform provides a mock function with given fields: dst, src, atEOF
func (_m *SpanningTransformer) Transform(dst []byte, src []byte, atEOF bool) (int, int, error) {
	ret := _m.Called(dst, src, atEOF)

	var r0 int
	if rf, ok := ret.Get(0).(func([]byte, []byte, bool) int); ok {
		r0 = rf(dst, src, atEOF)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func([]byte, []byte, bool) int); ok {
		r1 = rf(dst, src, atEOF)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func([]byte, []byte, bool) error); ok {
		r2 = rf(dst, src, atEOF)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
