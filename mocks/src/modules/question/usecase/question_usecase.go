// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	domain "github.com/pramasyana/bibit.id/src/modules/question/domain"
	mock "github.com/stretchr/testify/mock"
)

// QuestionUsecase is an autogenerated mock type for the QuestionUsecase type
type QuestionUsecase struct {
	mock.Mock
}

// QuestionNumber1 provides a mock function with given fields:
func (_m *QuestionUsecase) QuestionNumber1() (domain.ResponseNumber1, error) {
	ret := _m.Called()

	var r0 domain.ResponseNumber1
	if rf, ok := ret.Get(0).(func() domain.ResponseNumber1); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.ResponseNumber1)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuestionNumber3 provides a mock function with given fields: text
func (_m *QuestionUsecase) QuestionNumber3(text string) (domain.ResponseNumber3, error) {
	ret := _m.Called(text)

	var r0 domain.ResponseNumber3
	if rf, ok := ret.Get(0).(func(string) domain.ResponseNumber3); ok {
		r0 = rf(text)
	} else {
		r0 = ret.Get(0).(domain.ResponseNumber3)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuestionNumber4 provides a mock function with given fields: text
func (_m *QuestionUsecase) QuestionNumber4(text []string) (domain.ResponseNumber4, error) {
	ret := _m.Called(text)

	var r0 domain.ResponseNumber4
	if rf, ok := ret.Get(0).(func([]string) domain.ResponseNumber4); ok {
		r0 = rf(text)
	} else {
		r0 = ret.Get(0).(domain.ResponseNumber4)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
